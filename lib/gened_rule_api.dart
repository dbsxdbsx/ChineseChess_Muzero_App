// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.45.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'gened_rule_api.io.dart'
    if (dart.library.html) 'gened_rule_api.web.dart';
import 'package:meta/meta.dart';

class RuleApiImpl implements RuleApi {
  final RuleApiPlatform _platform;
  factory RuleApiImpl(ExternalLibrary dylib) =>
      RuleApiImpl.raw(RuleApiPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory RuleApiImpl.wasm(FutureOr<WasmModule> module) =>
      RuleApiImpl(module as ExternalLibrary);
  RuleApiImpl.raw(this._platform);
  Future<void> testLog1({required String log, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner
            .wire_test_log_1(port_, _platform.api2wire_String(log)),
        parseSuccessData: _wire2api_unit,
        constMeta: kTestLog1ConstMeta,
        argValues: [log],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kTestLog1ConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "test_log_1",
        argNames: ["log"],
      );

  Future<void> testPrint1({required String log, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner
            .wire_test_print_1(port_, _platform.api2wire_String(log)),
        parseSuccessData: _wire2api_unit,
        constMeta: kTestPrint1ConstMeta,
        argValues: [log],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kTestPrint1ConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "test_print_1",
        argNames: ["log"],
      );

  Future<bool> isLegalMove(
          {required int srcRow,
          required int srcCol,
          required int dstRow,
          required int dstCol,
          dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_is_legal_move(
            port_,
            api2wire_u8(srcRow),
            api2wire_u8(srcCol),
            api2wire_u8(dstRow),
            api2wire_u8(dstCol)),
        parseSuccessData: _wire2api_bool,
        constMeta: kIsLegalMoveConstMeta,
        argValues: [srcRow, srcCol, dstRow, dstCol],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kIsLegalMoveConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "is_legal_move",
        argNames: ["srcRow", "srcCol", "dstRow", "dstCol"],
      );

  Future<Uint8List> getOrigBoard({dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_get_orig_board(port_),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kGetOrigBoardConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetOrigBoardConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_orig_board",
        argNames: [],
      );

  Future<void> updateBoardData(
          {required int row,
          required int col,
          required int pieceIndex,
          dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_update_board_data(
            port_, api2wire_u8(row), api2wire_u8(col), api2wire_u8(pieceIndex)),
        parseSuccessData: _wire2api_unit,
        constMeta: kUpdateBoardDataConstMeta,
        argValues: [row, col, pieceIndex],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kUpdateBoardDataConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "update_board_data",
        argNames: ["row", "col", "pieceIndex"],
      );

  Future<void> updatePlayerData({required String player, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner
            .wire_update_player_data(port_, _platform.api2wire_String(player)),
        parseSuccessData: _wire2api_unit,
        constMeta: kUpdatePlayerDataConstMeta,
        argValues: [player],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kUpdatePlayerDataConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "update_player_data",
        argNames: ["player"],
      );
}

// Section: api2wire

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: wire2api

bool _wire2api_bool(dynamic raw) {
  return raw as bool;
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

void _wire2api_unit(dynamic raw) {
  return;
}
