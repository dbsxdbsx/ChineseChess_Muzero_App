// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.45.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'gened_ucci_api.io.dart'
    if (dart.library.html) 'gened_ucci_api.web.dart';
import 'package:meta/meta.dart';

class UcciApiImpl implements UcciApi {
  final UcciApiPlatform _platform;
  factory UcciApiImpl(ExternalLibrary dylib) =>
      UcciApiImpl.raw(UcciApiPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory UcciApiImpl.wasm(FutureOr<WasmModule> module) =>
      UcciApiImpl(module as ExternalLibrary);
  UcciApiImpl.raw(this._platform);
  Stream<String> subscribeUcciEngine(
          {required Player player, required String enginePath, dynamic hint}) =>
      _platform.executeStream(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_subscribe_ucci_engine(port_,
            api2wire_player(player), _platform.api2wire_String(enginePath)),
        parseSuccessData: _wire2api_String,
        constMeta: kSubscribeUcciEngineConstMeta,
        argValues: [player, enginePath],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSubscribeUcciEngineConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "subscribe_ucci_engine",
        argNames: ["player", "enginePath"],
      );

  Future<bool> writeToProcess(
          {required String command,
          required int msec,
          required Player player,
          String? checkStrOption,
          dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_write_to_process(
            port_,
            _platform.api2wire_String(command),
            api2wire_u32(msec),
            api2wire_player(player),
            _platform.api2wire_opt_String(checkStrOption)),
        parseSuccessData: _wire2api_bool,
        constMeta: kWriteToProcessConstMeta,
        argValues: [command, msec, player, checkStrOption],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kWriteToProcessConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "write_to_process",
        argNames: ["command", "msec", "player", "checkStrOption"],
      );

  Future<bool> isProcessLoaded(
          {required int msec, required Player player, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_is_process_loaded(
            port_, api2wire_u32(msec), api2wire_player(player)),
        parseSuccessData: _wire2api_bool,
        constMeta: kIsProcessLoadedConstMeta,
        argValues: [msec, player],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kIsProcessLoadedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "is_process_loaded",
        argNames: ["msec", "player"],
      );

  Future<bool> isProcessUnloaded(
          {required int msec, required Player player, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_is_process_unloaded(
            port_, api2wire_u32(msec), api2wire_player(player)),
        parseSuccessData: _wire2api_bool,
        constMeta: kIsProcessUnloadedConstMeta,
        argValues: [msec, player],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kIsProcessUnloadedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "is_process_unloaded",
        argNames: ["msec", "player"],
      );

  Future<String> getEngineName({required Player player, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner
            .wire_get_engine_name(port_, api2wire_player(player)),
        parseSuccessData: _wire2api_String,
        constMeta: kGetEngineNameConstMeta,
        argValues: [player],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetEngineNameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_engine_name",
        argNames: ["player"],
      );
}

// Section: api2wire

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_player(Player raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: wire2api

String _wire2api_String(dynamic raw) {
  return raw as String;
}

bool _wire2api_bool(dynamic raw) {
  return raw as bool;
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}
