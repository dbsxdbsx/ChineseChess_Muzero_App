// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.77.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'gened_rule_api.io.dart'
    if (dart.library.html) 'gened_rule_api.web.dart';
import 'bridge_generated_shares.dart';
export 'bridge_generated_shares.dart';
import 'bridge_generated_shares.io.dart'
    if (dart.library.html) 'bridge_generated_shares.web.dart';

class RuleApiImpl implements RuleApi {
  final RuleApiPlatform _platform;
  final BridgeGeneratedSharesPlatform _sharedPlatform;
  final BridgeGeneratedSharesImpl _sharedImpl;

  factory RuleApiImpl(ExternalLibrary dylib) {
    final platform = RuleApiPlatform(dylib);
    final sharedPlatform = BridgeGeneratedSharesPlatform(dylib);
    final sharedImpl = BridgeGeneratedSharesImpl(dylib);
    return RuleApiImpl.raw(platform, sharedPlatform, sharedImpl);
  }

  RuleApiImpl.raw(this._platform, this._sharedPlatform, this._sharedImpl);

  /// Only valid on web/WASM platforms.
  factory RuleApiImpl.wasm(FutureOr<WasmModule> module) =>
      RuleApiImpl(module as ExternalLibrary);

  Future<void> testLog1({required String log, dynamic hint}) {
    var arg0 = _sharedPlatform.api2wire_String(log);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_log_1(port_, arg0),
      parseSuccessData: _sharedImpl.wire2api_unit,
      constMeta: kTestLog1ConstMeta,
      argValues: [log],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestLog1ConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "test_log_1",
        argNames: ["log"],
      );

  Future<void> testPrint1({required String log, dynamic hint}) {
    var arg0 = _sharedPlatform.api2wire_String(log);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_print_1(port_, arg0),
      parseSuccessData: _sharedImpl.wire2api_unit,
      constMeta: kTestPrint1ConstMeta,
      argValues: [log],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestPrint1ConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "test_print_1",
        argNames: ["log"],
      );

  Future<bool> isLegalMove(
      {required int srcRow,
      required int srcCol,
      required int dstRow,
      required int dstCol,
      dynamic hint}) {
    var arg0 = api2wire_u8(srcRow);
    var arg1 = api2wire_u8(srcCol);
    var arg2 = api2wire_u8(dstRow);
    var arg3 = api2wire_u8(dstCol);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_is_legal_move(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _sharedImpl.wire2api_bool,
      constMeta: kIsLegalMoveConstMeta,
      argValues: [srcRow, srcCol, dstRow, dstCol],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsLegalMoveConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "is_legal_move",
        argNames: ["srcRow", "srcCol", "dstRow", "dstCol"],
      );

  Future<U8Array256> getOrigBoard({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_orig_board(port_),
      parseSuccessData: _wire2api_u8_array_256,
      constMeta: kGetOrigBoardConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetOrigBoardConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_orig_board",
        argNames: [],
      );

  Future<void> updateBoardData(
      {required int row,
      required int col,
      required int pieceIndex,
      dynamic hint}) {
    var arg0 = api2wire_u8(row);
    var arg1 = api2wire_u8(col);
    var arg2 = api2wire_u8(pieceIndex);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_update_board_data(port_, arg0, arg1, arg2),
      parseSuccessData: _sharedImpl.wire2api_unit,
      constMeta: kUpdateBoardDataConstMeta,
      argValues: [row, col, pieceIndex],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUpdateBoardDataConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "update_board_data",
        argNames: ["row", "col", "pieceIndex"],
      );

  Future<void> updatePlayerData({required String player, dynamic hint}) {
    var arg0 = _sharedPlatform.api2wire_String(player);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_update_player_data(port_, arg0),
      parseSuccessData: _sharedImpl.wire2api_unit,
      constMeta: kUpdatePlayerDataConstMeta,
      argValues: [player],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUpdatePlayerDataConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "update_player_data",
        argNames: ["player"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  U8Array256 _wire2api_u8_array_256(dynamic raw) {
    return U8Array256(_sharedImpl.wire2api_uint_8_list(raw));
  }
}

// Section: api2wire

// Section: finalizer
