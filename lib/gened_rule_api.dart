// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports

import 'dart:convert';
import 'dart:typed_data';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class RuleApi {
  Future<Platform> platform({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPlatformConstMeta;

  Future<bool> rustReleaseMode({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRustReleaseModeConstMeta;

  Future<bool> isLegalMove(
      {required int srcRow,
      required int srcCol,
      required int dstRow,
      required int dstCol,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsLegalMoveConstMeta;

  Future<Uint8List> getOrigBoard({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetOrigBoardConstMeta;

  Future<void> updateBoardData(
      {required int row,
      required int col,
      required int pieceIndex,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUpdateBoardDataConstMeta;

  Future<void> updatePlayerData({required String player, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUpdatePlayerDataConstMeta;

  Future<void> testLog1({required String log, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTestLog1ConstMeta;
}

enum Platform {
  Unknown,
  Android,
  Ios,
  Windows,
  Unix,
  MacIntel,
  MacApple,
  Wasm,
}

class RuleApiImpl extends FlutterRustBridgeBase<RuleApiWire>
    implements RuleApi {
  factory RuleApiImpl(ffi.DynamicLibrary dylib) =>
      RuleApiImpl.raw(RuleApiWire(dylib));

  RuleApiImpl.raw(RuleApiWire inner) : super(inner);

  Future<Platform> platform({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_platform(port_),
        parseSuccessData: _wire2api_platform,
        constMeta: kPlatformConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kPlatformConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "platform",
        argNames: [],
      );

  Future<bool> rustReleaseMode({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_rust_release_mode(port_),
        parseSuccessData: _wire2api_bool,
        constMeta: kRustReleaseModeConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kRustReleaseModeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "rust_release_mode",
        argNames: [],
      );

  Future<bool> isLegalMove(
          {required int srcRow,
          required int srcCol,
          required int dstRow,
          required int dstCol,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_is_legal_move(
            port_,
            _api2wire_u8(srcRow),
            _api2wire_u8(srcCol),
            _api2wire_u8(dstRow),
            _api2wire_u8(dstCol)),
        parseSuccessData: _wire2api_bool,
        constMeta: kIsLegalMoveConstMeta,
        argValues: [srcRow, srcCol, dstRow, dstCol],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kIsLegalMoveConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "is_legal_move",
        argNames: ["srcRow", "srcCol", "dstRow", "dstCol"],
      );

  Future<Uint8List> getOrigBoard({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_get_orig_board(port_),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kGetOrigBoardConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetOrigBoardConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_orig_board",
        argNames: [],
      );

  Future<void> updateBoardData(
          {required int row,
          required int col,
          required int pieceIndex,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_update_board_data(port_,
            _api2wire_u8(row), _api2wire_u8(col), _api2wire_u8(pieceIndex)),
        parseSuccessData: _wire2api_unit,
        constMeta: kUpdateBoardDataConstMeta,
        argValues: [row, col, pieceIndex],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kUpdateBoardDataConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "update_board_data",
        argNames: ["row", "col", "pieceIndex"],
      );

  Future<void> updatePlayerData({required String player, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_update_player_data(port_, _api2wire_String(player)),
        parseSuccessData: _wire2api_unit,
        constMeta: kUpdatePlayerDataConstMeta,
        argValues: [player],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kUpdatePlayerDataConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "update_player_data",
        argNames: ["player"],
      );

  Future<void> testLog1({required String log, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_test_log_1(port_, _api2wire_String(log)),
        parseSuccessData: _wire2api_unit,
        constMeta: kTestLog1ConstMeta,
        argValues: [log],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kTestLog1ConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "test_log_1",
        argNames: ["log"],
      );

  // Section: api2wire
  ffi.Pointer<wire_uint_8_list> _api2wire_String(String raw) {
    return _api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  int _api2wire_u8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  // Section: api_fill_to_wire

}

// Section: wire2api
bool _wire2api_bool(dynamic raw) {
  return raw as bool;
}

Platform _wire2api_platform(dynamic raw) {
  return Platform.values[raw];
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

void _wire2api_unit(dynamic raw) {
  return;
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class RuleApiWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RuleApiWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RuleApiWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_platform(
    int port_,
  ) {
    return _wire_platform(
      port_,
    );
  }

  late final _wire_platformPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_platform');
  late final _wire_platform =
      _wire_platformPtr.asFunction<void Function(int)>();

  void wire_rust_release_mode(
    int port_,
  ) {
    return _wire_rust_release_mode(
      port_,
    );
  }

  late final _wire_rust_release_modePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_rust_release_mode');
  late final _wire_rust_release_mode =
      _wire_rust_release_modePtr.asFunction<void Function(int)>();

  void wire_is_legal_move(
    int port_,
    int src_row,
    int src_col,
    int dst_row,
    int dst_col,
  ) {
    return _wire_is_legal_move(
      port_,
      src_row,
      src_col,
      dst_row,
      dst_col,
    );
  }

  late final _wire_is_legal_movePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint8, ffi.Uint8, ffi.Uint8,
              ffi.Uint8)>>('wire_is_legal_move');
  late final _wire_is_legal_move = _wire_is_legal_movePtr
      .asFunction<void Function(int, int, int, int, int)>();

  void wire_get_orig_board(
    int port_,
  ) {
    return _wire_get_orig_board(
      port_,
    );
  }

  late final _wire_get_orig_boardPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_orig_board');
  late final _wire_get_orig_board =
      _wire_get_orig_boardPtr.asFunction<void Function(int)>();

  void wire_update_board_data(
    int port_,
    int row,
    int col,
    int piece_index,
  ) {
    return _wire_update_board_data(
      port_,
      row,
      col,
      piece_index,
    );
  }

  late final _wire_update_board_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint8, ffi.Uint8,
              ffi.Uint8)>>('wire_update_board_data');
  late final _wire_update_board_data = _wire_update_board_dataPtr
      .asFunction<void Function(int, int, int, int)>();

  void wire_update_player_data(
    int port_,
    ffi.Pointer<wire_uint_8_list> player,
  ) {
    return _wire_update_player_data(
      port_,
      player,
    );
  }

  late final _wire_update_player_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_update_player_data');
  late final _wire_update_player_data = _wire_update_player_dataPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_test_log_1(
    int port_,
    ffi.Pointer<wire_uint_8_list> log,
  ) {
    return _wire_test_log_1(
      port_,
      log,
    );
  }

  late final _wire_test_log_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_test_log_1');
  late final _wire_test_log_1 = _wire_test_log_1Ptr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
