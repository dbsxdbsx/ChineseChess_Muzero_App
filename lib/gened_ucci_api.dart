// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.75.3.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'bridge_generated_shares.dart';
export 'bridge_generated_shares.dart';
import 'bridge_generated_shares.io.dart';
import 'dart:ffi' as ffi;

abstract class UcciApi {
  Stream<String> subscribeUcciEngine(
      {required Player player, required String enginePath, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSubscribeUcciEngineConstMeta;

  Future<bool> writeToProcess(
      {required String command,
      required int msec,
      required Player player,
      String? checkStrOption,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kWriteToProcessConstMeta;

  Future<bool> isProcessLoaded(
      {required int msec, required Player player, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsProcessLoadedConstMeta;

  Future<bool> isProcessUnloaded(
      {required int msec, required Player player, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsProcessUnloadedConstMeta;

  Future<String> getEngineName({required Player player, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetEngineNameConstMeta;
}

enum Player {
  Red,
  Black,
}

class UcciApiImpl implements UcciApi {
  final UcciApiPlatform _platform;
  final BridgeGeneratedSharesPlatform _sharedPlatform;
  final BridgeGeneratedSharesImpl _sharedImpl;

  factory UcciApiImpl(ExternalLibrary dylib) {
    final platform = UcciApiPlatform(dylib);
    final sharedPlatform = BridgeGeneratedSharesPlatform(dylib);
    final sharedImpl = BridgeGeneratedSharesImpl(dylib);
    return UcciApiImpl.raw(platform, sharedPlatform, sharedImpl);
  }

  UcciApiImpl.raw(this._platform, this._sharedPlatform, this._sharedImpl);

  /// Only valid on web/WASM platforms.
  factory UcciApiImpl.wasm(FutureOr<WasmModule> module) =>
      UcciApiImpl(module as ExternalLibrary);

  Stream<String> subscribeUcciEngine(
      {required Player player, required String enginePath, dynamic hint}) {
    var arg0 = api2wire_player(player);
    var arg1 = _sharedPlatform.api2wire_String(enginePath);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_subscribe_ucci_engine(port_, arg0, arg1),
      parseSuccessData: _sharedImpl.wire2api_String,
      constMeta: kSubscribeUcciEngineConstMeta,
      argValues: [player, enginePath],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSubscribeUcciEngineConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "subscribe_ucci_engine",
        argNames: ["player", "enginePath"],
      );

  Future<bool> writeToProcess(
      {required String command,
      required int msec,
      required Player player,
      String? checkStrOption,
      dynamic hint}) {
    var arg0 = _sharedPlatform.api2wire_String(command);
    var arg1 = api2wire_u32(msec);
    var arg2 = api2wire_player(player);
    var arg3 = _platform.api2wire_opt_String(checkStrOption);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_write_to_process(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _sharedImpl.wire2api_bool,
      constMeta: kWriteToProcessConstMeta,
      argValues: [command, msec, player, checkStrOption],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kWriteToProcessConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "write_to_process",
        argNames: ["command", "msec", "player", "checkStrOption"],
      );

  Future<bool> isProcessLoaded(
      {required int msec, required Player player, dynamic hint}) {
    var arg0 = api2wire_u32(msec);
    var arg1 = api2wire_player(player);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_is_process_loaded(port_, arg0, arg1),
      parseSuccessData: _sharedImpl.wire2api_bool,
      constMeta: kIsProcessLoadedConstMeta,
      argValues: [msec, player],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsProcessLoadedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "is_process_loaded",
        argNames: ["msec", "player"],
      );

  Future<bool> isProcessUnloaded(
      {required int msec, required Player player, dynamic hint}) {
    var arg0 = api2wire_u32(msec);
    var arg1 = api2wire_player(player);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_is_process_unloaded(port_, arg0, arg1),
      parseSuccessData: _sharedImpl.wire2api_bool,
      constMeta: kIsProcessUnloadedConstMeta,
      argValues: [msec, player],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsProcessUnloadedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "is_process_unloaded",
        argNames: ["msec", "player"],
      );

  Future<String> getEngineName({required Player player, dynamic hint}) {
    var arg0 = api2wire_player(player);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_engine_name(port_, arg0),
      parseSuccessData: _sharedImpl.wire2api_String,
      constMeta: kGetEngineNameConstMeta,
      argValues: [player],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetEngineNameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_engine_name",
        argNames: ["player"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api
}

// Section: api2wire

@protected
int api2wire_player(Player raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u32(int raw) {
  return raw;
}
// Section: finalizer

class UcciApiPlatform extends FlutterRustBridgeBase<UcciApiWire> {
  final BridgeGeneratedSharesPlatform _sharedPlatform;
  UcciApiPlatform(ffi.DynamicLibrary dylib)
      : _sharedPlatform = BridgeGeneratedSharesPlatform(dylib),
        super(UcciApiWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : _sharedPlatform.api2wire_String(raw);
  }

// Section: finalizer

// Section: api_fill_to_wire
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class UcciApiWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  UcciApiWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  UcciApiWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(uintptr_t)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<uintptr_t Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_subscribe_ucci_engine(
    int port_,
    int player,
    ffi.Pointer<wire_uint_8_list> engine_path,
  ) {
    return _wire_subscribe_ucci_engine(
      port_,
      player,
      engine_path,
    );
  }

  late final _wire_subscribe_ucci_enginePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Int32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_subscribe_ucci_engine');
  late final _wire_subscribe_ucci_engine = _wire_subscribe_ucci_enginePtr
      .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_write_to_process(
    int port_,
    ffi.Pointer<wire_uint_8_list> command,
    int msec,
    int player,
    ffi.Pointer<wire_uint_8_list> check_str_option,
  ) {
    return _wire_write_to_process(
      port_,
      command,
      msec,
      player,
      check_str_option,
    );
  }

  late final _wire_write_to_processPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_write_to_process');
  late final _wire_write_to_process = _wire_write_to_processPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>, int, int,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_is_process_loaded(
    int port_,
    int msec,
    int player,
  ) {
    return _wire_is_process_loaded(
      port_,
      msec,
      player,
    );
  }

  late final _wire_is_process_loadedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Uint32, ffi.Int32)>>('wire_is_process_loaded');
  late final _wire_is_process_loaded =
      _wire_is_process_loadedPtr.asFunction<void Function(int, int, int)>();

  void wire_is_process_unloaded(
    int port_,
    int msec,
    int player,
  ) {
    return _wire_is_process_unloaded(
      port_,
      msec,
      player,
    );
  }

  late final _wire_is_process_unloadedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Uint32, ffi.Int32)>>('wire_is_process_unloaded');
  late final _wire_is_process_unloaded =
      _wire_is_process_unloadedPtr.asFunction<void Function(int, int, int)>();

  void wire_get_engine_name(
    int port_,
    int player,
  ) {
    return _wire_get_engine_name(
      port_,
      player,
    );
  }

  late final _wire_get_engine_namePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>(
          'wire_get_engine_name');
  late final _wire_get_engine_name =
      _wire_get_engine_namePtr.asFunction<void Function(int, int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list(
    int len,
  ) {
    return _new_uint_8_list(
      len,
    );
  }

  late final _new_uint_8_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list');
  late final _new_uint_8_list = _new_uint_8_listPtr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
typedef uintptr_t = ffi.UnsignedLongLong;
